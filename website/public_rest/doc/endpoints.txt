Endpoints for the new API
=========================

BASE_API_URL = 'http://example.com/api/'

URLs are relative.

User
----
        1. /users/              :               Collection of all users
        
        2. /users/<username>    :               Detail of a user. Alternatively, use no. 3? 

        3. /users/?display_name=bob  :          Return Collection (of 1 user), using query param display_name.

        4. /users/?email=foo@bar.com :          Return Collection (of 1 user) which has the email address foo@bar.com.

        5. /users/?email=foo@bar.com&verified=true : Collection of 1 user which has foo@bar.com email AND EMAIL IS VERIFIED.

        6. /users/?verified=true :              Collection of ALL Users which have at least one verified email address.

        7. /users/<int>          :              How DRF gives the DetailView of a User right now. /users/1, /users/2 etc.

        8. /users/?page=2        :              Paginated collection result of Users. Each collection has "count", "prev"
and "next", which turn into follow up links to previous/next pages, otherwise, are null.

        9. /users/?list=test@mail.example.com : All users which are subscribed to the given list "test@mail.example.com"
                                                 

MailingList
-----------
        1. /lists/              :               Collection of all mailing lists.
        
        2. /lists/?fqdn_listname='test@mail.example.com' : Collection (of 1 list), which has the given FQDN.
        
        3. /lists/?mail_host='mail.example.com'          : Collection of all lists @ the given mail host.

        4. /lists/?user=naeblis or /lists/?email=naeblis.echo@gmail.com : All lists which the given user is subscribed to.

        5. /lists/?display_name='test'

        # the user query parameter here has the display_name for now, but that
        # might change to user_id or sequence id (from the Queryset).
        6. /lists/?user=superman&owner=true

        7. /lists/?user=batman&moderator=true

        8. /lists/?user=robin&member=true 
        
        (If any of those booleans are false, do a reverse search, excluding from that particular parameter)

        9. Pagination just like in Users.


Membership
----------

        1. /memberships/        : Collection of All Memberships

        2. /memberships/?fqdn_listname=test@mail.example.com    : Memberships on given list.

        3. /memberships/?user=manish_gill                       : All Memberships of the given user

